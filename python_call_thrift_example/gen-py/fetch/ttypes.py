#-*- coding: UTF-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import error.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class FETCH_STATUS:
  NOT_START = 0
  FETCHING = 1
  COMPLETE = 2
  ERROR = 3

  _VALUES_TO_NAMES = {
    0: "NOT_START",
    1: "FETCHING",
    2: "COMPLETE",
    3: "ERROR",
  }

  _NAMES_TO_VALUES = {
    "NOT_START": 0,
    "FETCHING": 1,
    "COMPLETE": 2,
    "ERROR": 3,
  }

class FETCH_OPT_FROM:
  FROM_ALL = 0
  FROM_TOOL = 1
  FROM_ADMIN = 2

  _VALUES_TO_NAMES = {
    0: "FROM_ALL",
    1: "FROM_TOOL",
    2: "FROM_ADMIN",
  }

  _NAMES_TO_VALUES = {
    "FROM_ALL": 0,
    "FROM_TOOL": 1,
    "FROM_ADMIN": 2,
  }


class FetchRecord:
  """
  Attributes:
   - srcUrl
   - resultUrl
   - status
   - addTime
   - completeTime
   - optFrom
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'srcUrl', None, None, ), # 1
    (2, TType.STRING, 'resultUrl', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.I64, 'addTime', None, None, ), # 4
    (5, TType.I64, 'completeTime', None, None, ), # 5
    (6, TType.I32, 'optFrom', None, None, ), # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'comment', None, None, ), # 10
  )

  def __init__(self, srcUrl=None, resultUrl=None, status=None, addTime=None, completeTime=None, optFrom=None, comment=None,):
    self.srcUrl = srcUrl
    self.resultUrl = resultUrl
    self.status = status
    self.addTime = addTime
    self.completeTime = completeTime
    self.optFrom = optFrom
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.srcUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resultUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.addTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.completeTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.optFrom = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.comment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FetchRecord')
    if self.srcUrl is not None:
      oprot.writeFieldBegin('srcUrl', TType.STRING, 1)
      oprot.writeString(self.srcUrl)
      oprot.writeFieldEnd()
    if self.resultUrl is not None:
      oprot.writeFieldBegin('resultUrl', TType.STRING, 2)
      oprot.writeString(self.resultUrl)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.addTime is not None:
      oprot.writeFieldBegin('addTime', TType.I64, 4)
      oprot.writeI64(self.addTime)
      oprot.writeFieldEnd()
    if self.completeTime is not None:
      oprot.writeFieldBegin('completeTime', TType.I64, 5)
      oprot.writeI64(self.completeTime)
      oprot.writeFieldEnd()
    if self.optFrom is not None:
      oprot.writeFieldBegin('optFrom', TType.I32, 6)
      oprot.writeI32(self.optFrom)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 10)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
